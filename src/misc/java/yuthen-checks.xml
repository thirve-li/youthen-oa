<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    This configuration file was written by the eclipse-cs plugin configuration editor
-->
<!--
    Checkstyle-Configuration: youthen-checks
    Description: none
-->
<module name="Checker">
  <property name="severity" value="warning"/>
  <message key="general.exception" value="Checker：Got an exception - {0}"/>
  <module name="TreeWalker">
    <message key="general.exception" value="TreeWalker：Got an exception - {0}"/>
    <module name="FileContentsHolder"/>
    <module name="ConstantName">
      <message key="name.invalidPattern" value="可読性向上のために定数名はアルファベット大文字で記述する。定数名 ''{0}'' はパターン ''{1}'' に一致しなければなりません。"/>
    </module>
    <module name="AvoidStarImport">
      <property name="excludes" value="org.junit.Assert"/>
    </module>
    <module name="AbstractClassName">
      <property name="format" value="^[A-Z][a-zA-Z0-9]*$|Abstract[a-zA-Z0-9]$"/>
      <message key="illegal.abstract.class.name" value="可読性向上のために抽象クラスはAbstractで始まるクラス名をつける。抽象クラス名 ''{0}'' はパターン ''{1}'' に一致しなければなりません。"/>
    </module>
    <module name="PackageName">
      <property name="format" value="^com.youthen.[a-z][a-z0-9_]+(\.[a-z_][a-z0-9_]*)*$"/>
      <message key="name.invalidPattern" value="作ったコードがyouthenのものであることを示すために、パッケージ名はcom.youthenからはじめる。パッケージ名 ''{0}'' はパターン ''{1}'' に一致しなければなりません。"/>
    </module>
    <module name="RedundantImport"/>
    <module name="MethodLength">
      <property name="severity" value="warning"/>
      <message key="maxLen.method" value="もしかして、複雑な問題を複雑なまま解決しようとしているかも。メソッドが {0,number,integer} 行あります（最大 {1,number,integer} 行まで）。"/>
    </module>
    <module name="TodoComment">
      <property name="severity" value="info"/>
      <property name="format" value="TODO"/>
    </module>
    <module name="ArrayTypeStyle">
      <message key="array.type.style" value="可読性向上のために配列の[]の書き方を統一する。配列の[]が変数の後ろに記述されています。"/>
    </module>
    <module name="CyclomaticComplexity">
      <property name="severity" value="warning"/>
      <property name="max" value="15"/>
      <message key="cyclomaticComplexity" value="もしかして、複雑な問題を複雑なまま解決しようとしているかも。単純な問題に切り分けると幸せになれます。比較式およびクロージャが{0,number,integer}存在します。{1,number,integer})を超える場合、リファクタリングを推奨します。"/>
    </module>
    <module name="FinalClass">
      <property name="severity" value="info"/>
    </module>
    <module name="StringLiteralEquality"/>
    <module name="MissingSwitchDefault"/>
    <module name="ModifiedControlVariable">
      <property name="severity" value="info"/>
    </module>
    <module name="RedundantThrows">
      <property name="allowUnchecked" value="true"/>
      <property name="allowSubclasses" value="true"/>
      <property name="logLoadErrors" value="true"/>
      <property name="suppressLoadErrors" value="true"/>
      <message key="redundant.throws.duplicate" value="''{0}'' が重複しています。"/>
      <message key="redundant.throws.subclass" value="''{0}'' は ''{1}'' のサブクラスです。"/>
      <message key="redundant.throws.unchecked" value="''{0}'' はチェックされない例外です。"/>
    </module>
    <module name="PackageDeclaration"/>
    <module name="DeclarationOrder">
      <property name="severity" value="warning"/>
      <message key="declaration.order.constructor" value="可読性向上のために、変数の後、メソッドの前にコンストラクタを定義する。コンストラクタの定義順序が間違っています。(定義順序：クラス変数(public, protected, package-private, private), インスタンス変数(public, protected, package-private, private), コンストラクタ, メソッド)"/>
      <message key="declaration.order.access" value="変数アクセスの定義順序が間違っています。(定義順序：クラス変数(public, protected, package-private, private), インスタンス変数(public, protected, package-private, private), コンストラクタ, メソッド)"/>
      <message key="declaration.order.instance" value="可読性向上のために変数は一番最初（ただしstaticな変数の次）に定義する。インスタンス変数の定義順序が間違っています。(定義順序：クラス変数(public, protected, package-private, private), インスタンス変数(public, protected, package-private, private), コンストラクタ, メソッド)"/>
      <message key="declaration.order.method" value="可読性向上のために、コンストラクタの後にメソッドを定義する。メソッドの定義順序が間違っています。(定義順序：クラス変数(public, protected, package-private, private), インスタンス変数(public, protected, package-private, private), コンストラクタ, メソッド)"/>
      <message key="declaration.order.static" value="可読性向上のために、staticな変数は一番最初に定義する。クラス変数の定義順序が間違っています。(定義順序：クラス変数(public, protected, package-private, private), インスタンス変数(public, protected, package-private, private), コンストラクタ, メソッド)"/>
    </module>
    <module name="DefaultComesLast">
      <message key="default.comes.last" value="可読性向上のために、defaultはswitchの最後に記述する必要があります。"/>
    </module>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn">
      <property name="severity" value="warning"/>
    </module>
    <module name="LocalFinalVariableName">
      <property name="severity" value="warning"/>
      <message key="name.invalidPattern" value="可読性向上のために、ローカルfinal変数名 ''{0}'' は小文字から始まるキャメルケース(パターン ''{1}'') に一致しなければなりません。もしかしてprivate static finalな変数として定義するべきでは？"/>
    </module>
    <module name="LocalVariableName">
      <property name="severity" value="warning"/>
      <property name="tokens" value="VARIABLE_DEF"/>
      <message key="name.invalidPattern" value="可読性向上のために、ローカル変数名 ''{0}'' は小文字から始まるキャメルケース(パターン ''{1}'') に一致しなければなりません。"/>
    </module>
    <module name="MemberName">
      <property name="severity" value="warning"/>
      <message key="name.invalidPattern" value="可読性向上のために、インスタンス変数名 ''{0}'' はパターン ''{1}'' に一致しなければなりません。"/>
    </module>
    <module name="MethodName">
      <property name="severity" value="info"/>
      <message key="name.invalidPattern" value="可読性向上のために、メソッド名 ''{0}'' は小文字から始まるキャメルケース(パターン ''{1}'') に一致しなければなりません。"/>
      <message key="method.name.equals.class.name" value="メソッド名 ''{0}'' must not equal the enclosing class name."/>
    </module>
    <module name="StaticVariableName">
      <property name="severity" value="warning"/>
      <property name="format" value="^s[A-Z][a-zA-Z0-9]*$"/>
      <message key="name.invalidPattern" value="可読性向上のために、static変数名 ''{0}'' は小文字''s''から始まるキャメルケース(パターン ''{1}'') に一致しなければなりません。"/>
    </module>
    <module name="TypeName">
      <property name="severity" value="warning"/>
      <property name="format" value="^[A-Z][a-zA-Z0-9]*$|I[A-Z][a-zA-Z0-9]*$"/>
      <message key="name.invalidPattern" value="可読性向上のために、クラス名またはインタフェース名 ''{0}'' はパターン ''{1}'' に一致しなければなりません。"/>
    </module>
    <module name="ParameterName">
      <property name="severity" value="warning"/>
      <property name="format" value="^a[A-Z][a-zA-Z0-9]*$"/>
      <message key="name.invalidPattern" value="可読性向上のために、パラメータ名 ''{0}'' はパターン ''{1}'' に一致しなければなりません。"/>
    </module>
    <module name="IllegalImport"/>
    <module name="AnonInnerLength">
      <property name="severity" value="warning"/>
      <property name="max" value="400"/>
      <message key="maxLen.anonInner" value="きっとそのコードは匿名クラスではなくて立派なクラスです。匿名インナークラスの長さが {0,number,integer} 行あります（最大 {1,number,integer} 行まで）。"/>
    </module>
    <module name="ParameterNumber">
      <property name="severity" value="warning"/>
      <message key="maxParam" value="パラメータ数が {0,number,integer} を超えています。ドメインモデル設計をするべきです。"/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
    </module>
    <module name="ModifierOrder">
      <message key="mod.order" value="''{0}'' 修飾子がJava推奨の順序に沿いません。(Java推奨順序：public, protected, private , abstract, static, final, transient, volatile, synchronized, native, strictfp)"/>
    </module>
    <module name="RedundantModifier"/>
    <module name="NeedBraces"/>
    <module name="BooleanExpressionComplexity">
      <property name="severity" value="info"/>
      <message key="booleanExpressionComplexity" value="もしかして、複雑な問題を複雑なまま解決しようとしているかも。Boolean式が{0,number,integer}存在します。 {1,number,integer}を超える場合、リファクタリングを検討して下さい。"/>
    </module>
    <module name="NPathComplexity">
      <property name="severity" value="info"/>
      <message key="npathComplexity" value="もしかして、複雑な問題を複雑なまま解決しようとしているかも。メソッド内のNpath(実行パス)が{0,number,integer}存在します。{1,number,integer}を超える場合、リファクタリングを検討して下さい。"/>
    </module>
    <module name="ThrowsCount">
      <property name="severity" value="info"/>
      <property name="max" value="4"/>
    </module>
    <module name="VisibilityModifier">
      <property name="severity" value="info"/>
      <message key="variable.notPrivate" value="変数 ''{0}'' は private とし、アクセッサメソッドを持つべきです。privateにできない特別な理由がある場合は、コメントを記述して下さい。"/>
    </module>
    <module name="ReturnCount">
      <property name="severity" value="info"/>
    </module>
    <module name="NestedTryDepth">
      <property name="severity" value="info"/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="warning"/>
    </module>
    <module name="NestedIfDepth">
      <property name="severity" value="info"/>
      <property name="max" value="4"/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="warning"/>
    </module>
    <module name="MultipleStringLiterals">
      <property name="severity" value="info"/>
      <message key="multiple.string.literal" value="ファイル内で文字リテラル({0})が{1}回、使用されています。多くの箇所で利用するようなら定数を定義するべきです。"/>
    </module>
    <module name="InnerAssignment"/>
    <module name="ExplicitInitialization"/>
    <module name="AvoidInlineConditionals">
      <property name="severity" value="info"/>
      <message key="inline.conditional.avoid" value="可読性向上のために、インライン条件は使用すべきではありません。"/>
    </module>
    <module name="UncommentedMain"/>
    <module name="UpperEll"/>
    <module name="MethodLength">
      <property name="severity" value="info"/>
      <property name="max" value="50"/>
      <property name="countEmpty" value="false"/>
      <message key="maxLen.method" value="もしかして、複雑な問題を複雑なまま解決しようとしているかも。メソッドが {0,number,integer} 行あります（{1,number,integer} 行未満が望ましいです）。"/>
    </module>
    <module name="AnonInnerLength">
      <property name="severity" value="info"/>
      <property name="max" value="200"/>
      <message key="maxLen.anonInner" value="きっとそのコードは匿名クラスではなくて立派なクラスです。匿名インナークラスの長さが {0,number,integer} 行あります（{1,number,integer} 行未満が望ましいです）。"/>
    </module>
    <module name="CyclomaticComplexity">
      <property name="severity" value="info"/>
      <property name="max" value="8"/>
      <message key="cyclomaticComplexity" value="もしかして、複雑な問題を複雑なまま解決しようとしているかも。比較式およびクロージャが{0,number,integer}存在します。{1,number,integer})を超える場合、リファクタリングを検討して下さい。"/>
    </module>
    <module name="FinalParameters"/>
    <module name="FallThrough">
      <property name="severity" value="warning"/>
    </module>
    <module name="DesignForExtension">
      <property name="severity" value="ignore"/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="info"/>
    </module>
    <module name="JavadocMethod">
      <property name="severity" value="warning"/>
      <property name="excludeScope" value="anoninner"/>
      <property name="allowMissingReturnTag" value="true"/>
      <property name="allowMissingPropertyJavadoc" value="true"/>
      <property name="logLoadErrors" value="true"/>
      <property name="suppressLoadErrors" value="true"/>
    </module>
    <module name="WriteTag">
      <property name="severity" value="info"/>
    </module>
    <module name="JavadocVariable">
      <property name="severity" value="warning"/>
    </module>
    <module name="JavadocType">
      <property name="severity" value="warning"/>
    </module>
    <module name="JavadocStyle">
      <property name="severity" value="warning"/>
      <property name="checkFirstSentence" value="false"/>
      <property name="endOfSentenceFormat" value=".*"/>
      <message key="javadoc.empty" value="Javadocが空です"/>
    </module>
  </module>
  <module name="FileLength">
    <property name="severity" value="warning"/>
    <message key="maxLen.file" value="もしかして、複雑な問題を複雑なまま解決しようとしているかも。ファイルが {0,number,integer} 行あります（最大 {1,number,integer} 行まで）。"/>
  </module>
  <module name="NewlineAtEndOfFile"/>
  <module name="FileLength">
    <property name="severity" value="info"/>
    <property name="max" value="600"/>
    <message key="maxLen.file" value="もしかして、複雑な問題を複雑なまま解決しようとしているかも。ファイルが {0,number,integer} 行あります（{1,number,integer} 行未満が望ましいです）。"/>
  </module>
  <module name="JavadocPackage">
    <property name="severity" value="info"/>
    <message key="javadoc.packageInfo" value="package-info.javaファイルがありません。"/>
    <message key="javadoc.legacyPackageHtml" value="古いpackage.htmlファイルを削除する必要があります。"/>
  </module>
  <module name="SuppressionCommentFilter"/>
</module>
